<!-- ;  103 Цепочки операторов объединения с null в PHP
; Операторы объединения можно вызывать друг за другом цепочкой.
;  В следующем примере в переменную запишется либо первый элемент массива, либо второй элемент массива, 
;  либо заданная строка, если этих элементов нет:

; <?php
; 	$elem = $arr['test1'] ?? $arr['test2'] ?? 'empty';
; ?>

; Перепишите следующий код через изученный оператор:
; <?php
; 	if (isset($user['name'])) {
; 		$res = $user['name'];
; 	} elseif (isset($user['surname'])) {
; 		$res = $user['surname'];
; 	} else {
; 		$res = '';
; 	}
; ?>
; $res = $user['name']?? $user['surname']?? ''

; // 104 Логические операции в PHP
; Давайте посмотрим на следующий код:
; <?php
; 	$a = 1;
; 	$b = 2;
; 	if ($a == $b) {
; 		var_dump(true);
; 	} else {
; 		var_dump(false);
; 	}
; ?>
; Как вы видите, в данном коде выполняется сравнение переменных a и b и, если они равны, то в консоль выводится true, а если не равны - то false.
; Здесь пришло время открыть вам некоторую неочевидную вещь: 
; на самом деле конструкция if не является обязательной для сравнения - сами операторы вида ==, ===, !=, <, > и т.д. 
; возвращают своим результатом либо true, либо false.
; Смотрите пример:
; <?php
; 	var_dump(1 == 1); // выведет true
; 	var_dump(1 == 2); // выведет false
; ?>
; Исходя из написанного, код из начала урока можно переписать более простым образом:
; <?php
; 	$a = 1;
; 	$b = 2;
; 	var_dump($a == $b);
; ?>
; Можно не выводить результат сразу, а присвоить его какой-нибудь переменной:
; <?php
; 	$a = 1;
; 	$b = 2;
	
; 	$res = $a == $b;
; 	var_dump($res);
; ?>

; Пусть даны следующие переменные:
; Используя оператор ==, узнайте, равны ли значения этих переменных или нет.
; <?php
; 	$a = 2 * (3 - 1);
; 	$b = 6 - 2;
; $res = $a == $b;
; var_dump($res);
; ?>
; Пусть даны следующие переменные:
; Используя оператор >, узнайте, больше ли переменная $a, чем $b.
; <?php
; 	$a = 5 * (7 - 4);
; 	$b = 1 + 2 + 7;

; 	$res = $a > $b;
; 	var_dump($res);
; ?>

; // 105 Определение четверти часа в PHP
; Пусть у нас есть переменная $min, в которой хранится количество минут от 0 до 59:
; <?php
; 	$min = 10;
; ?>
; Давайте определим, в какую четверть часа попадает указанное количество минут:
; <?php
; 	$min = 10;
; 	if ($min >= 0 and $min <= 14) {
; 		echo '1 четверть';
; 	}
; 	if ($min >= 15 and $min <= 29) {
; 		echo '2 четверть';
; 	}
; 	if ($min >= 30 and $min <= 44) {
; 		echo '3 четверть';
; 	}
; 	if ($min >= 45 and $min <= 59) {
; 		echo '4 четверть';
; 	}
; ?>

; Решите аналогичную задачу, только определите в какую треть часа попадает указанное количество минут.
; <?php
; 	$min = 25;
; 	if ($min >= 0 and $min <= 19) {
; 		echo '1 -я';
; 	}
; 	if ($min >= 20 and $min <= 39) {
; 		echo '2 -я';
; 	}
; 	if ($min >= 40 and $min <= 59) {
; 		echo '3 -я';
; 	}
; ?>

; // 106 Проверка длины строк и массивов в PHP
; Пусть у нас есть переменная $str, в которой хранится некоторая произвольная строка:
; <?php
; 	$str = '12345';
; ?>
; Давайте напишем условие, которое выведет сообщение на экран, если длина строки равна или больше трех символов:
; <?php
; 	$str = '12345';
; 	if (strlen($str) >= 3) {
; 		echo '!';
; 	}
; ?>

; В переменной $arr содержится некоторый массив с числами. 
; Напишите условие, которое проверит, что в массиве 3 элемента. 
; Если это так, выведите на экран сумму элементов массива.
; <?php
; $str = '12345';
; if(strlen($str) >= 3){
; 	echo $str[0] + $str[1] + $str[2] + $str[3] + $str[4];
; }

; ?>

; // 107 Проверка символа строки в PHP
; Пусть дана некоторая строка, состоящая из цифр:
; <?php
; 	$str = '12345';
; ?>
; Давайте проверим, равен ли первый символ этой строки числу 1:
; <?php
; 	$str = '12345';
	
; 	if ($str[0] == 1) {
; 		echo '!';
; 	}
; ?>
; Проверим теперь последний символ на равенство числу 5:
; <?php
; 	$str = '12345';
; 	$last = $str[strlen($str) - 1];
; 	if ($last == 5) {
; 		echo '!';
; 	}
; ?>

; Дана некоторая строка. Проверьте, заканчивается ли она на '0'
; <?php
; $str = '12340';
; $last = $str[strlen($str) - 1];
; if($last == 0) {
; 	echo '0';
; }
; ?>

; // 108 Остаток от деления в PHP
; Пусть у нас есть две переменные с числами:
; <?php
; 	$a = 10;
; 	$b = 3;
; ?>
; Давайте найдем остаток от деления одной переменной на другую:
; <?php
; 	$a = 10;
; 	$b = 3;
; 	echo $a % $b; // выведет 1
; ?>
; Пусть теперь в переменных хранятся такие значения, что одна переменная делится на вторую нацело:
; <?php
; 	$a = 10;
; 	$b = 5;
; 	echo $a % $b; // выведет 0
; ?>
; Давайте напишем скрипт, который будет проверять, делится ли нацело одно число на второе:
; <?php
; 	$a = 10;
; 	$b = 3;
; 	if ($a % $b === 0) {
; 		echo 'делится нацело';
; 	} else {
; 		echo 'делится с остатком';
; 	}
; ?>
; Пусть теперь требуется, если число делится с остатком, вывести этот остаток на экран:
; <?php
; 	$a = 10;
; 	$b = 3;
; 	if ($a % $b === 0) {
; 		echo 'делится нацело';
; 	} else {
; 		echo 'делится с остатком ' . $a % $b;
; 	}
; ?>
; В приведенном выше коде получается, что остаток вычисляется в двух местах, а это не оптимально.
; Поправим проблему:
; <?php
; 	$a = 10;
; 	$b = 3;
; 	$rest = $a % $b;
; 	if ($rest === 0) {
; 		echo 'делится нацело';
; 	} else {
; 		echo 'делится с остатком ' . $rest;
; 	}
; ?>

; Как известно, четные числа делятся на 2 без остатка, а нечетные - с остатком. Пусть у вас дано число. 
; С помощью оператора % и конструкции if проверьте четное это число или нет.
; <?php
; $num = 10;
; $res = $num % 2;
; if ($res === 0) {
; 	echo 'четное число';
; } else {
; 	echo 'не четное число' . $res;
; }
; ?>

; // 110 Цикл foreach в PHP

; Цикл foreach используется для прохождения по всем элементам массива.
; Синтаксис такой: пишется ключевое слово foreach, а после него круглые скобки (). 
; В этих скобках указывается переменная, в которой лежит перебираемый массив, потом слово as, 
; а после него - переменная, в которую при каждом проходе цикла будет попадать элемент массива. 
; Затем должны идти фигурные скобки {}, в которых будет расположено тело цикла.
; Итак, синтаксис нашего цикла выглядит так:
; <?php
; 	foreach (имяМассива as переменнаяДляЭлемента) {
; 		/*
; 			Код, который находится между фигурными
; 			скобками будет повторяться столько раз,
; 			сколько элементов у массива.
; 		*/
; 	}
; ?>

; // 111 Элементы массива через foreach в PHP

; Давайте с помощью цикла foreach выведем на экран все элементы массива:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
	
; 	foreach ($arr as $elem) {
; 		echo $elem;
; 	}
; ?>

; // 112 Столбец элементов массива в PHP

; А теперь сделаем так, чтобы элементы массива выводились не в строчку, а получился столбец. 
; Для этого при выводе элемента массива будем ставить после него тег br:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
	
; 	foreach ($arr as $elem) {
; 		echo $elem . '<br>';
; 	}
; ?>

; Дан массив:
; Выведите столбец элементов этого массива на экран.
; <?php
; 	$arr = ['a', 'b', 'c', 'd', 'e'];
; 	foreach ($arr as $elem) {
; 		echo $elem . '<br>';
; 	}
; ?>

; // 113 Квадраты чисел в PHP

; Переберем массив с числами циклом и выведем на экран квадраты этих чисел:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
	
; 	foreach ($arr as $elem) {
; 		echo $elem * $elem . '<br>';
; 	}
; ?>

; // 114 Накопление суммы в PHP

; Давайте с помощью цикла найдем сумму элементов массива. Для этого используем уже изученный нами прием для накопления результата в цикле:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
; 	$res = 0;
	
; 	foreach ($arr as $elem) {
; 		$res += $elem;
; 	}
	
; 	echo $res;
; ?>

; Найдите среднее арифметическое его элементов.
; <?php
; 	$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
; 	$res = 0;
; 	foreach($arr as $elem) {
; 		$res += $elem;
; 	}
; 	echo $res / count($arr);
; ?>

; // 115 Получение ключей в цикле foreach в PHP

; В цикле foreach можно получать не только элементы перебираемого массива, но и ключи. 
; В таком случае после as следует указать такую конструкцию: $ключ => $элемент. 
; В переменной $ключ будут хранится ключи, а в переменной $элемент - соответствующие этим ключам элементы.
; Чтобы посмотреть на практике, как работать с ключами, давайте сделаем следующее - при каждом проходе цикла 
; будем выводить на экран ключ массива и соответствующий ему элемент через дефис:
; <?php
; 	$arr = ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5];
	
; 	foreach ($arr as $key => $elem) {
; 		echo $key.'-'.$elem; // выведет: 'a-1', 'b-2', 'c-3' и так далее...
; 	}
; ?>

; <?php
; 	$arr = ['green' => 'зеленый', 'red' => 'красный','blue' => 'голубой'];
; 	foreach ($arr as $key => $elem) {
; 		echo $key.'-'.$elem . '<br>';
; 	}
; ?>
; С помощью цикла foreach выведите на экран столбец ключей и элементов в формате green - зеленый.

; Дан массив:

; <?php
; 	$arr = ['user1' => 30, 'user2' => 32, 'user3' => 33];
; 	foreach($arr as $key => $elem){
; 		echo $key.'-'.'возраст'.$elem.'лет' . '<br>';
; 	}
; ?>
; С помощью цикла foreach выведите на экран столбец строк такого формата: user1 - возраст 30 лет.

;// 116 Перебор массива и if в PHP

; Внутри цикла foreach можно использовать условие if. Давайте, например, при переборе массива, будем выводить на экран только элементы с четными числами:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
	
; 	foreach ($arr as $elem) {
; 		if ($elem % 2 == 0) {
; 			echo $elem.'-';
; 		}
; 	}
; ?>

; <?php
; 	$arr = [1, 2, 3, 4, 5];
;     foreach ($arr as $elem) {
;         if($elem % 2 != 0) {
;             echo $elem.'';
;         }
;     }
; ?>
; С помощью цикла foreach и оператора if выведите в консоль нечетные элементы массива.

; Дан массив:
; <?php
; 	$arr = [2, 5, 9, 15, 1, 4];
;     foreach($arr as $elem){
;         if(3 < $elem && $elem < 10) {
;             echo $elem;
;         }
;     }
; ?>
; С помощью цикла foreach и оператора if выведите в консоль те элементы массива, которые больше 3-х, но меньше 10.

; Дан массив с числами. Числа могут быть положительными и отрицательными. Найдите сумму положительных элементов массива.
;  <?php
; $arr = [2, 5, -9, 15, -1, 4];
; $res = 0 ;
; foreach($arr as $elem){
;     if($elem > 0){
;     $res += +$elem;
;     }  
; }
; echo $res.'<br>';
; ?>

; <?php
; 	$arr = [10, 20, 30, 50, 235, 3000];
;     foreach($arr as $elem){
;     $elem=(string) $elem;
;     if($elem[0]==1 or $elem[0]==2 or $elem[0]==5){
;         echo $elem.' ';
;     }
; }
; ?>
; Выведите на экран только те числа из массива, которые начинаются на цифру 1, 2 или 5.

; Составьте массив дней недели. С помощью цикла foreach выведите все дни недели, а выходные дни выведите жирным.
; <php?
; $arr = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
; foreach ($arr as $elem){
;     if($elem == 'вс'or $elem =='сб'){
;         echo '<b>'.$elem.'</b>';
; }
; else{
;  echo $elem;
;     }
; }
; ?>

; Задание:Составьте массив дней недели. С помощью цикла foreach выведите все дни недели, субботу и воскресенье жирным, 
; а текущий день выведите курсивом (если это суббота или воскресенье то отобразить и жирным и курсивом). 
; Текущий день должен храниться в переменной $day.
; <?php 
; $day='вс';
; $arr=['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
; foreach ($arr as $value) {
;     if ($value=='сб' or $value=='вс' and $value==$day) {
;             echo '<i><b> '.$value.'</b></i>'.' ';
;     } 
;     else {
;         if ($value=='сб' or $value=='вс') {
;             echo '<b>'.$value.'</b>'.' ';
;         }
;         else {
;         if ($value==$day) {
;         echo '<i>'.$value.'</i>';
;         } 
;             else {
;             echo ' '.$value.' ';
;             }
;         }
;     }
; }
; ?>

; // 117 Цикл while в PHP

; ?php
; 	while ( пока выражение истинно ) {
; 		выполняем этот код циклически
; 		в начале каждого цикла проверяем выражение в круглых скобках
; 	}
; ?>
; Цикл закончится, когда выражение перестанет быть истинным. Если оно было ложным изначально - то он не выполнится ни разу.

; Давайте для примера последовательно выведем с помощью цикла while числа от одного до пяти:
; <?php
; 	$i = 1; // задаем какую-нибудь переменную
	
; 	while ($i <= 5) {
; 		echo $i; // выводим содержимое $i в консоль
; 		$i++;    // увеличиваем $i на единицу при каждом проходе цикла
; 	}
; ?>

; Выведите на экран числа от 11 до 33.
; <php?
; $i = 11;
; while($i <= 33){
;     echo $i;
;     $i++;
; }
; ?>

; 118 Более сложный цикл while в PHP

; К счетчику не обязательно прибавлять единицу. Давайте для примера выведем столбец четных чисел от 2 до 10. 
; Для этого начальное значение переменной $i зададим как 2 и будем прибавлять двойку:
; <?php
; 	$i = 2;
; 		while ($i <= 10) {
; 		echo $i;
; 		$i += 2; // увеличиваем $i на 2 при каждом проходе цикла
; 	}
; ?>

; Выведите на экран четные числа в промежутке от 0 до 100.
; <php?
; $i = 0;
; while($i <= 100){
;     echo $i;
;     $i +=2;
; }
; ?>

; 119 Обратный отсчет в цикле while в PHP

; Счетчик не обязательно должен увеличиваться в цикле. Бывают и обратные ситуации, когда счетчик, наоборот, уменьшается. 
; Давайте для примера выведем столбец чисел от 10 до 1:
; <?php
; 	$i = 10; // начальное значение 10
; 		while ($i >= 1) { // пока $i больше 1
; 		echo $i;
; 		$i--; // уменьшаем $i на единицу
; 	}
; ?>

; Выведите на экран числа от 30 до 0.
; <php?
; $i = 30;
; while($i >=0){
;     echo $i;
;     $i--;
; }
; ?>

; 120 Ошибки начинающих при работе с циклом while в PHP

; <?php
; 	$test = true;
	
; 	while ($test === true) {
; 		/*
; 			Написанный здесь код будет выполняться "вечно"
; 			(пока скрипт не будет остановлен принудительно).
; 		*/
; 	}
; ?>

; 123 Изначально неверное условие в цикле while в PHP

; 125 Цикл for в PHP

; Цикл for является альтернативой while. Он более сложен для понимания, но чаще всего его любят больше за то, что он занимает меньше строчек.
; Вот его синтаксис:
; <?php
; 	for ( начальные команды; условие окончания; команды после прохода ) {
; 		тело цикла
; 	}
; ?>
; Начальные команды - это то, что выполнится перед стартом цикла. Они выполнятся только один раз. Обычно там размещают начальные значения счетчиков. 
; Условие окончания - это условие, при котором цикл будет крутится, пока оно истинное. Команды после прохода - это команды, которые будут выполнятся каждый раз 
; при окончании прохода цикла. Обычно там увеличивают счетчики.
; Давайте с помощью цикла for выведем последовательно числа от 1 до 9:
; <?php
; 	/*
; 		В начале цикла $i будет равно нулю,
; 		цикл будет выполнятся пока $i <= 9,
; 		после каждого прохода к $i прибавляется единица:
; 	*/
; 	for ($i = 0; $i <= 9; $i++) {
; 		echo $i; // выведет 1, 2... 9
; 	}
; ?>

; С помощью цикла for выведите на экран числа от 1 до 100.
; <php?
; for ($i = 1; $i <=100; $i++){
;     echo $i;
; }
; ?>

; С помощью цикла for выведите на экран четные числа в промежутке от 0 до 100.
; <php?
; for ($i = 2; $i <=100; $i+=2){
;     echo $i;
; }
; ?>

; С помощью цикла for выведите на экран нечетные числа в промежутке от 1 до 99.
; <php?
; for ($i = 1; $i <=99; $i+=2){
;     echo $i;
; }
; ?>

; 126 Накопление результата в цикле PHP

; Давайте с помощью цикла найдем сумму целых чисел от 1 до 100. Для таких задач существует стандартное решение, которое мы сейчас разберем. 
; Это решение заключается в том, что циклом перебираются числа и их сумма последовательно записывается в какую-то переменную переменную:
; <?php
; 	$result = 0;
; 		for ($i = 1; $i <= 100; $i++) {
; 		$result = $result + $i;
; 	}
; 		echo $result; // искомая сумма
; ?>
; Как это работает: изначально переменная $result имеет значение 0, затем при первом проходе цикла в нее записывается ее текущее 
; содержимое плюс значение счетчика. Получится, что каждую итерацию наша переменная будет расти, постепенно накапливая в себе результат.

; Найдите произведение целых чисел от 1 до 20.
; <php?
; $res = 1;
; for($i = 1; $i <= 20; $i++){
;     $res = $res * $i;
;    }
; echo $res;
; ?>

; Найдите сумму четных чисел от 2 до 100.
; <php?
; $res = 0;
; for($i = 2; $i <= 100; $i+=2){
;     $res = $res + $i;
;    }
; echo $res;
; ?>

; Найдите сумму нечетных чисел от 1 до 99.
; <php?
; $res = 0;
; for($i = 1; $i <= 100; $i+=2){
;     $res = $res + $i;
;    }
; echo $res;
; ?>

; 128 Общий синтаксис цикла for в PHP

; сделаем два счетчика: первый пусть каждую итерацию цикла увеличивается на единицу, а второй - на двойку:

; <?php
; 	for ($i = 0, $j = 0; $i <= 9; $i++, $j += 2) {
; 		echo $i . ' ' . $j . '<br>';
; 	}
; ?>

; 129 Инструкция break в PHP

; <?php
; 	$arr = [1, 2, 3, 4, 5];
	
; 	foreach ($arr as $elem) {
; 		if ($elem == 3) {
; 			echo 'есть';
; 		}
; 	}
; ?>

; давай завершим цикл, как только нам встретится число 3:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
	
; 	foreach ($arr as $elem) {
; 		if ($elem == 3) {
; 			echo 'есть';
; 			break; // выйдем из цикла
; 		}
; 	}
; ?>
; Инструкция break может завершать любые циклы: foreach, for, while.

; Дан массив с числами. Запустите цикл, который будет по очереди выводить элементы этого массива в консоль до тех пор, 
; пока не встретится элемент со значением 0. После этого цикл должен завершить свою работу.
; <?php 
; $arr = [1, 2, 3, 4, 5, 6, 0, 9];
; foreach($arr as $elem){
;     echo $elem;
;     if($elem == 0){
;         break;
;     }
; }
; ?>

; Дан массив с числами. Найдите сумму элементов, расположенных от начала массива до первого отрицательного числа.
; <?php 
; $res = 0;
; $arr = [1, 2, 3, 4, 5, 3, 0, -9, 5];
; foreach($arr as $elem){
;  $res += +$elem;
;        if($elem < 0){
;                break;
;     }
;    }
;    echo $res; 
; ?>

; Дан массив с числами. Найдите позицию первого числа 3 в этом массиве (считаем, что это число обязательно есть в массиве).
; <?php
; $arr = [1, 2, 3, 4, 5];
; foreach($arr as $key => $elem){
;     if($elem ==3){
; echo $key.'-'.$elem;
;     }
; }
; ?>

; Определите, сколько целых чисел, начиная с числа 1, нужно сложить, чтобы сумма получилась больше 100.
; <?php
; $res = 0;
; for($i =1; $i <= 100; $i++){
;     $res = $res + $i;
;     if($res > 100){
;         break;
;     }
    
; }
; echo 'количество: '.$i.'<br>';
;     echo 'сумм: '.$res;
; ?>

;  130 Инструкция continue в PHP

;  Пусть у нас дан массив с числами. Давайте переберем его циклом и числа, которые делятся на 2, возведем в квадрат и выведем на экран, а числа, которые делятся на 3, 
;  возведем в куб и выведем на экран.
; Вот решение описанной задачи:
; <?php
; 	$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
; 		foreach ($arr as $elem) {
; 		if ($elem % 2 === 0) {
; 			$res = $elem * $elem;
; 			echo 'kbadro'.$res.'<br>';
; 		} elseif ($elem % 3 === 0) {
; 			$res = $elem * $elem * $elem;
; 			echo 'kub'.$res.'<br>';
; 		}
; 	}
; ?>
; строчка echo $res повторяется два раза

; добавив к нашему if еще условие else, которое будет срабатывать для элементов, не делящихся на 2 и 3, и вызовем там инструкцию continue, 
; которая сразу же будет перебрасывать нас на новую итерацию цикла:

; <?php
; 	$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	
; 	foreach ($arr as $elem) {
; 		if ($elem % 2 === 0) {
; 			$res = $elem * $elem;
; 		} elseif ($elem % 3 === 0) {
; 			$res = $elem * $elem * $elem;
; 		} else {
; 			continue; // перейдем на новую итерацию цикла
; 		}
; 				echo $res.'<br>';
; ?>

; 131 Работа с флагами в PHP

; Сейчас мы научимся работать с флагами. Флаг - это специальная переменная, которое может принимать только два значения: true или false. 
; С помощью флагов можно решать задачи, проверяющие отсутствие чего-либо: к примеру, можно проверить, что в массиве нет элемента с определенным значением.
; Давайте решим следующую задачу: дан массив с числами, нужно проверить, есть ли в нем элемент со значением 3 или нет. Если есть - выведем 'есть', если нет - выведем 'нет'.

; 132 Проверяем наличие элемента массива в PHP

; Для начала давайте попробуем вывести 'есть'. Для этого переберем все элементы нашего массива и ифом будем спрашивать - равен ли текущий элемент значению 3. Если равен - выведем 'есть':
; <?php
; 	$arr = [1, 2, 3, 4, 5, 3];
; 		foreach ($arr as $elem) {
; 		if ($elem === 3) {
; 			echo 'есть';
; 		}

; 	}
; ?>

; Поправим проблему: завершим цикл с помощью break, если элемент уже найден:

; <?php
; 	$arr = [1, 2, 3, 4, 3, 5];
	
; 	foreach ($arr as $elem) {
; 		if ($elem === 3) {
; 			echo 'есть';
; 			break;  // завершим цикл
; 		}
; 	}
; ?>

; 133 Проверяем отстутствие элемента массива в PHP

; Затем запустим цикл с ифом так, как мы делали это раньше. Если цикл обнаружит, что в массиве есть элемент 3 - то поставим переменную $flag в значение true и выйдем из цикла с помощью break:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
; 	$flag = false; // считаем, что элемента 3 нет в массиве
; 		foreach ($arr as $elem) {
; 		if ($elem === 3) {
; 			$flag = true; // элемент есть - переопределим переменную $flag
; 			break;        // выйдем из цикла
; 		}
; 	}
;     Теперь после цикла мы можем сделать иф, который посмотрит на переменную $flag и выведет на экран 'есть' или 'нет':
;     	if ($flag === true) {
; 		echo 'есть';
; 	} else {
; 		echo 'нет';
; 	}
; ?>

; <?php
; 	$arr = ['a', 'b', 'c', 'd', 'e'];
;     $flag = false;
;     foreach($arr as $elem){
;         if($elem === 'c'){
;             $flag = true;
;             break;
;         }
;     }
;     if($flag === true){
;         echo 'yes';
;     }else{
;         echo 'no';
;     }
; ?>
; Проверьте, что в этом массиве есть элемент 'c'. Если есть - выведите 'да', а если нет - выведите 'нет'.

; 134 Произвольное количество итераций в цикле while в PHP

; Бывают задачи, в которых количество итераций цикла не известно заранее. К примеру: дано число, нужно делить его на 2 столько раз, пока результат не станет меньше 10. 
; Нужно вывести число, которое при этом получится.
; В этом случае мы не знаем количество итераций. Не беда - сделаем условием цикла условие пока число больше 10:
; <?php
; 	$num = 500;
	
; 	while ($num > 10) {
; 		$num = $num / 2;
; 	}
; 		echo $num; // после цикла получим результат
; ?>

; Дано число $num с неким начальным значением. Умножайте его на 3 столько раз, пока результат умножения не станет больше 1000. 
; Какое число получится? Посчитайте количество итераций, необходимых для этого.
; <?php
; 	$num = 1;
; 		while ($num < 1000) {
; 		$num = $num *3;
; 	}
; 		echo $num;
; ?>

; 135 Произвольное количество итераций в цикле for без тела в PHP

; Для решения задачи из предыдущего урока можно использовать и цикл for, но особым образом - без тела:
; <?php
; 	for ($num = 500; $num > 10; $num = $num / 2);
; 	echo $num; // после цикла получим результат
; ?>
; Кстати, при желании легко можно подсчитать количество совершенных циклом операций:
; <?php
; 	for ($num = 500, $i = 0; $num > 10; $num = $num / 2, $i++);
; 	echo $num . ' ' . $i;
; ?>

;Решите предыдущую задачу через цикл for.
; <?php
; 	for ($num = 1, $i = 0; $num < 1000; $num = $num * 3, $i++);
; 	echo $num . ' ' . $i;
; ?>

; 136 Формирование строк через циклы в PHP

; Сейчас мы научимся с помощью цикла формировать строки. Давайте для примера сделаем строку, заполненную десятью буквами 'x'.
; Для этого сделаем переменную $str и при каждом проходе цикла будем добавлять в нее одну букву 'x'.
; После цикла мы получим нужную нам строку:
; <?php
; 	$str = ''; // начальное значение - пустые кавычки
	; 	for ($i = 0; $i < 10; $i++) {
; 		$str = $str . 'x';
; 	}
	
; 	echo $str; // выведет 'xxxxxxxxxx'
; ?>

; Давайте упростим код, используя сокращенную операцию .=:
; <?php
; 	$str = '';
; 		for ($i = 0; $i < 10; $i++) {
; 		$str .= 'x';
; 	}
	
; 	echo $str;
; ?>

; С помощью цикла сформируйте строку, заполненную 5-тью нулями.
; <?php 
; $str = '';
; for($i = 0; $i < 5; $i++){
;     $str .= 0;
; }
; echo $str;
; ?>

; 137 Формирование строк с цифрами через циклы в PHP

; Давайте теперь сделаем строку '12345'. Задача аналогична задаче с десятью иксами - только прибавлять будем не иксы, а счетчик цикла:
; <?php
; 	$str = '';
; 		for ($i = 1; $i <= 5; $i++) {
; 		$str = $str . $i;
; 	}
; 		echo $str; // выведет '12345'
; ?>

; С помощью цикла сформируйте строку '123456789' и запишите ее в переменную $str. Выведите значение этой переменной на экран.
; <php?
; $str = '';
; for($i = 1; $i <=9; $i++){
;     $str = $str . $i;
; }
; echo $str;
;  ?>

;  С помощью цикла сформируйте строку '987654321' и запишите ее в переменную $str. Выведите значение этой переменной на экран.
; <php?
; 	$str = '';
; 	for ($i = 9; $i >= 1; $i--) {
; 		$str = $str . $i;
; 	}
; 		echo $str; 
;  ?>

; С помощью цикла сформируйте строку '-1-2-3-4-5-6-7-8-9-' и запишите ее в переменную $str. Выведите значение этой переменной на экран.
; <php?
; $str = '';
; for($i = 1; $i <=9; $i++){
;     $str =  $str . '-' . $i ;
; }
; echo  $str. '-' ;
;  ?>

; 138 Вложенные циклы в PHP

; Циклы, работу с которыми вы уже знаете, можно вкладывать друг в друга. К примеру, давайте решим следующую задачу: выведем на экран строку:
; 111222333444555666777888999
; Тут одним циклом не обойтись - нужно запустить два вложенных друг в друга цикла: первый цикл будет перебирать числа (сначала 1, потом 2, потом 3 и так до 9), 
; а второй цикл будет повторять эти числа три раза.
; Давайте реализуем:
; <?php
; 	for ($i = 1; $i <= 9; $i++) {
; 		for ($j = 1; $j <= 3; $j++) {
; 			echo $i;
; 		}
; 	}
; ?>
; Обратите внимание: первый цикл имеет счетчик $i, второй $j, а если будет еще и третий цикл - то у него счетчиком будет переменная $k.
;  Это стандартные общепринятые названия, следует пользоваться именно ими.

; С помощью двух вложенных циклов выведите на экран следующую строку:
; 11 12 13 21 22 23 31 32 33
; <php?
; 	for ($i = 1; $i <= 3; $i++) {
; 		for ($j = 1; $j <= 3; $j++) {
; 			echo ' '. $i.$j;
; 		}
; 	}
; ?>

; 139 Заполнение массивов в PHP

; Пусть у нас есть какой-то массив:
; <?php
; 	$arr = [];
; ?>
; Давайте заполним этот массив какими-нибудь элементами. Можно сделать это вот так:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
; ?>
; А можно изначально создать массив пустым, а затем добавить в него данные вот так:
; <?php
; 	$arr = [];
; 		$arr[] = 1;
; 	$arr[] = 2;
; 	$arr[] = 3;
; 	$arr[] = 4;
;	$arr[] = 5;

; 140 Заполнение массивов через цикл for в PHP

; Давайте перепишем наш код так, чтобы заполнением массива занимался цикл for:
; <?php
; 	$arr = [];
; 		for ($i = 0; $i <= 4; $i++) {
; 		$arr[] = $i + 1;
; 	}
; 		var_dump($arr);
; ?>

; С помощью цикла заполните массив числами от 1 до 100.
; <?php
; $arr = [];
; for($i = 0; $i <= 100; $i++){
;     $arr[] = $i + 1;
; }
; var_dump($arr);
; ?>

; 141 Цикл for для массивов в PHP

; На самом деле элементы массива можно перебрать и обычным циклом for. 

; <?php
; 	$arr = [1, 2, 3, 4, 5];
; 	$length = count($arr);
	
; 	for ($i = 0; $i < $length; $i++) {
; 		echo $arr[$i];
; 	}
; ?>

; <?php
; 	$arr = ['a', 'b', 'c', 'd', 'e'];
;     $length = count($arr);
;     for ($i = 0; $i < $length; $i++){
;         echo $arr[$i];
;     }
; ?>
; С помощью цикла for выведите все эти элементы на экран.

; Применение цикла for для массивов в PHP
; Выведем на экран все элементы массива, кроме нулевого. Для этого начнем счетчик цикла не с нуля, а с единицы:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
; 	$length = count($arr);
	
; 	for ($i = 1; $i < $length; $i++) {
; 		echo $arr[$i];
; 	}
; ?>

; <?php
; 	$arr = ['a', 'b', 'c', 'd', 'e'];
;     $length = count($arr) - 1;
;     for($i = 0; $i < $length; $i++){
;         echo $arr[$i];
;     }
; ?>
; С помощью цикла for выведите на экран все элементы этого массива, кроме последнего.

; <?php
;     	$arr = [1, 2, 3, 4, 5, 6, 7, 8];
;     $length = count($arr) / 2;
;     for($i = 0; $i < $length; $i++){
;         echo $arr[$i];
;     }
; ?>
; С помощью цикла for выведите на экран первую половину элементов этого массива.

; 143 Распространенная ошибка при применении цикла for для массивов в PHP

; В следующем коде подсчет элементов массива вынесен в условие цикла:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
; 		for ($i = 1; $i < count($arr); $i++) {
; 		echo $arr[$i];
; 	}
; ?>
; На первый взгляд кажется, что этот код лучше, так как мы избавились от лишней переменной $length. На самом деле это не так. 
; Дело в том, что в приведенном коде функция count будет заново подсчитывать количество элементов массива каждую интерацию цикла. Это не оптимально.

; 144 Изменение массива в цикле for PHP

; Давайте увеличим каждый элемент этого массива в два раза в цикле
; <?php
; 	$arr = [1, 2, 3, 4, 5];
; 	$length = count($arr);
	; 	for ($i = 0; $i < $length; $i++) {
; 		$arr[$i] = $arr[$i] * 2;
; 	}
; 		var_dump($arr); // выведет [2, 4, 6, 8, 10]
; ?>

; Дан массив с числами. Переберите этот массив циклом и возведите каждый элемент этого массива в квадрат.
; <?php
; $arr = [1, 2, 3, 4, 5, 6];
; $length = count($arr);
; for($i = 0; $i < $length; $i++){
;     $arr[$i] = $arr[$i] * $arr[$i];
; }
; var_dump($arr);
; print_r ($arr);
; ?>

; 145 Сокращенные операции для изменения массива в цикле for PHP

; увеличим каждый элемент массива на 5, используя операцию +=:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
; 	$length = count($arr);
; 		for ($i = 0; $i < $length; $i++) {
; 		$arr[$i] += 5;
; 	}
; 		var_dump($arr); // выведет [6, 7, 8, 9, 10]
; ?>

Дан массив с числами. Переберите этот массив циклом и отнимите от каждого элемента единицу.
<?php
$arr = [1, 2, 3, 4, 5, 6];
$length = count($arr);
for($i = 0; $i < $length; $i++) {
    $arr[$i] -= 1;
}
var_dump($arr);
?> -->
<!-- 146 Практика на массивы в цикле в PHP

Дан следующий массив с работниками и их зарплатами:
Увеличьте зарплату каждого работника на 10%. -->

	<!--<?php
	 // $arr = [
	// 	'employee1' => 100,
	// 	'employee2' => 200,
	// 	'employee3' => 300,
	// 	'employee4' => 400,
	// 	'employee5' => 500,
	// 	'employee6' => 600,
	// 	'employee7' => 700,
	// ];
	
	// foreach ($arr as $elem){
	// 	$elem = $elem  + $elem*0.1;
	// 	echo'<pre>';
	// 	print_r($elem);  
	// 	echo'</pre>';
	// }
	// echo'<pre>';
	//   print_r($elem);  
	//   echo'</pre>'; -->
?>
<!-- 
	Модифицируйте предыдущую задачу так, чтобы зарплата увеличивалась только тем работникам, у которых она меньше или равна 400. -->
	<!-- <?php
	$arr = [
		'employee1' => 100,
		'employee2' => 200,
		'employee3' => 300,
		'employee4' => 400,
		'employee5' => 500,
		'employee6' => 600,
		'employee7' => 700,
	];
	foreach($arr as $elem){
		if($elem <= 400){
			$elem = $elem  + $elem*0.1;
		}
		echo'<pre>';
	 	print_r($elem);  
	 	echo'</pre>';
	}
	?> -->
	<!-- Дан следующий массив: -->

<!-- <?php
	$arr = [1 => 6, 2 => 7, 3 => 8, 4 => 9, 5 => 10];
    foreach ($arr as $key => $elem){
$sumkey += $key;
$sumelem += $elem;
$res = $sumkey / $sumelem;
    }
    echo'<pre>';
print_r($res);  
echo'</pre>';
echo 'sumelem' . ' ' . ($sumelem).'<br>';  
echo 'sumkey' . ' ' . ($sumkey);  
?> -->
<!-- Найдите сумму ключей этого массива и поделите ее на сумму значений. -->

<!-- Дан следующий массив: -->

<!-- <?php
	$arr = ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5];
    $arr1 = [];
    $arr2 = [];
    foreach($arr as $key => $elem){
        $arr1[] = $key;
        $arr2[] = $elem;
    }
    echo'<pre>';
    print_r($arr1);  
    echo'</pre>';
    echo'<pre>';
    print_r($arr2);  
    echo'</pre>';
?> -->
<!-- Запишите ключи этого массива в один массив, а значения - в другой. -->

<!-- Дан следующий массив: -->
<!-- 
<?php
	$arr = [
		1 => 125,
		2 => 225,
		3 => 128,
		4 => 356,
		5 => 145,
		6 => 281,
		7 => 452,
	];
    $arr2 = [];
    foreach($arr as $key => $elem){
        $elem = (string)$elem;
        if($elem[0]==1 or $elem[0]==2){
            $arr2[] = $elem;
        }

    }
    echo'<pre>';
    print_r($arr2);  
    echo'</pre>';
?> -->
<!-- Запишите в новый массив элементы, значение которых начинается с цифры 1 или цифры 2. 
То есть у вас в результате получится вот такой массив:
[
		125,
		225,
		128,
		145,
		281,
	]; -->

     <!-- 147 Отработка циклов PHP -->

<!-- Выведите с помощью цикла столбец чисел от 1 до 100. -->
<!-- <?php
$arr = [];
for($i = 0; $i<= 100; $i++){
    $arr[] = $i + 1;
}
echo'<pre>';
print_r($arr);  
echo'</pre>';
?> -->
<!-- Выведите с помощью цикла столбец чисел от 100 до 1. -->
<!-- <?php
$arr = [];
for($i = 100; $i>=1; $i--){
    $arr[] = $i;
}
echo'<pre>';
print_r($arr);  
echo'</pre>';
?> -->

<!-- Выведите с помощью цикла столбец четных чисел от 1 до 100. -->
<!-- <?php
$arr = [];
for($i = 1; $i<= 100; $i++){
    if($i%2==0){
    $arr[] = $i;
    }
}
echo'<pre>';
print_r($arr);  
echo'</pre>';
?> -->

<!-- Заполните массив 10-ю иксами с помощью цикла. -->
<!-- <?php
$arr = [];
for($i = 1; $i<= 10; $i++){
    $arr[] = 'x';   
}
echo'<pre>';
print_r($arr);  
echo'</pre>';
?> -->

<!-- Дан массив с числами. С помощью цикла выведите только те элементы массива, которые больше нуля и меньше 10-ти. -->
<!-- <?php
$arr = [1, 5, 8, 12, 8 , 9, 33, 0, -1, 42];
$length = count($arr);
for($i=0; $i<=$length; $i++){
    if($arr[$i] > 0 and $arr[$i]<10){
        echo'<pre>';
print_r($arr[$i]); 
echo'</pre>';
    }
}
?> -->
<!-- Дан массив с числами. С помощью цикла проверьте, что в нем есть элемент со значением 5. -->
<!-- <?php
$arr = [1, 5, 8, 12, 8 , 9, 33, 0, -1, 42];
$flag = false;
foreach ($arr as $elem){
    if($elem == 5){
        $flag = true;
        break;
    }
}
if($flag == true){
    echo 'yes';
} else{
    echo 'no';
}
?> -->

<!-- Дан массив с числами. С помощью цикла найдите сумму элементов этого массива. -->
<!-- <?php
$arr = [1, 5, 8, 12, 8 , 9, 33, 0, -1, 42];
$sum;
$length = count($arr);
for($i =0; $i <= $length; $i++){
    // $sum += $arr[$i];
}
echo $sum;
?> -->

<!-- Дан массив с числами. С помощью цикла найдите сумму квадратов элементов этого массива. -->
<!-- <?php
$arr = [1, 5, 8, 12, 8 , 9, 33, 0, -1, 42];
$sum;
$length = count($arr);
for($i =0; $i <= $length; $i++){
    // $sum += $arr[$i]*$arr[$i];
}
echo $sum;
?> -->
<!-- Дан массив с числами. Найдите среднее арифметическое его элементов (сумма элементов, делить на количество). -->
<!-- <?php
$arr = [1, 5, 8, 12, 8 , 9, 33, 0, -1, 42];
$sum;
$length = count($arr);
for($i =0; $i <= $length; $i++){
    //$sum += $arr[$i];
    // $res = $sum/$length;
}
//echo $res;
?> -->
<!-- Напишите скрипт, который будет находить факториал числа. Факториал - это произведение всех целых чисел, меньше данного, и его самого. -->
<!-- <?php
$num = 5;
$res = 1;
for($i =1; $i<=$num; $i++){
    $res *=$i;
}
echo $res;
?> -->
<!-- //148 Многомерные массивы в PHP
Элементы массива могут быть не только строками и числами, но и массивами. 
В этом случае у нас получится массив массивов или многомерный массив. 
В следующем примере массив $arr состоит из трех элементов, в свою очередь являющихся массивами:
<?php
	$arr = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']];
?>
Перепишем в более понятном виде:

<?php
	$arr = [
		['a', 'b', 'c'],
		['d', 'e', 'f'],
		['g', 'h', 'i'],
	];
?> -->
<!-- В зависимости от уровня вложенности массивы могут быть двухмерными - массив массивов, 
трехмерными - массив массивов массивов (ну и так далее - четырехмерными, пятимерными и тп).
Приведенный выше массив является двухмерным, 
так как внутри одного массива расположены другие подмассивы и уже в этих подмассивах нет других массивов. 
Чтобы вывести какой-либо элемент из двухмерного массива следует писать уже не одну пару квадратных скобок, а две: -->
<!-- <?php
	$arr = [
		['a', 'b', 'c'],
		['d', 'e', 'f'],
		['g', 'h', 'i'],
	];
	
	echo $arr[0][1]; // выведет 'b'
	echo $arr[1][2]; // выведет 'f'
?> -->

<!-- Дан следующий массив: -->
<!-- <?php
	$arr = [
		['a', 'b', 'c'],
		['d', 'e', 'f'],
		['g', 'h', 'i'],
		['j', 'k', 'l'],
	];
    echo $arr[3][2];
    echo $arr[1][1];
    echo $arr[2][0];
    echo $arr[0][0];
?> -->
<!-- Выведите с его помощью элементы с текстом 'l', 'e', 'g' и 'a'. -->

<!-- Дан следующий массив: -->
<?php
// 	$arr = [[1, 2], [3, 4], [5, 6]];

//     foreach ($arr as $elem){
//         foreach($elem as $elem2){
//             $res += $elem2;
//         }
//     }
//     echo'<pre>';
// print_r($res); 
// echo'</pre>';
// ?>
<!-- Найдите сумму всех его элементов. -->

<!-- 149 Трехмерный массив в PHP -->

<!-- Вот пример трехмерного массива: -->
<!-- <?php
	$arr = [
		[
			['a', 'b'],
			['c', 'd'],
		],
		[
			['e', 'f'],
			['g', 'h'],
		],
		[
			['i', 'j'],
			['k', 'l'],
		],
	];
?> -->
<!-- Для вывода элементов из такого массива уже необходимо написать три квадратные скобки: -->
<!-- <?php
	echo $arr[0][0][0]; // выведет 'a'
	echo $arr[2][1][0]; // выведет 'k'
?> -->


<!-- Дан следующий массив: -->
<!-- <?php
	$arr = [
		[
			[1, 2],
			[3, 4],
		],
		[
			[5, 6],
			[7, 8],
		],
	];
    foreach ($arr as $elem){
        foreach($elem as $elem2){
            foreach($elem2 as $elem3){
           $res += $elem3;
            }
       }
     }
    echo'<pre>';
 print_r($res); 
 echo'</pre>';
?> -->
<!-- Найдите сумму всех элементов приведенного массива. -->

<!-- 150 Ассоциативные массивы в PHP -->

<!-- Многомерные массивы также могут быть ассоциативными, например, вот так:
<?php
	$arr = [
		'user1' => [
			'name' => 'name1',
			'age'  => 31,
		],
		'user2' => [
			'name' => 'name2',
			'age'  => 32,
		],
	];
?>
Давайте с помощью этого массива выведем на экран, к примеру, имя второго юзера:
<?php
	echo $arr['user2']['name']; // выведет 'name2'
?> -->

<!-- Дан следующий массив: -->
<!-- <?php
	$arr = [
		'boys'  => [1 => 'Коля', 2 => 'Вася', 3 => 'Петя'],
		'girls' => [1 => 'Даша', 2 => 'Маша', 3 => 'Лена'],
	];
    echo $arr['girls'][2];
    echo $arr['boys'][1];
?> -->
<!-- Выведите с помощью этого массива имя первого мальчика и имя второй девочки. -->

<!-- Дан следующий массив: -->
<!-- <?php
	$arr = [
		'ru' => ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'],
		'en' => ['mn', 'ts', 'wd', 'th', 'fr', 'st', 'sn'],
	];
    echo $arr['en'][3];
?> -->
<!-- Выведите с помощью этого массива английское название среды. -->

<!-- Дан следующий массив: -->
<!-- <?php
	$arr = [
		[
			'name'   => 'user1',
			'age'    => 30,
			'salary' => 1000,
		],
		[
			'name'   => 'user2',
			'age'    => 31,
			'salary' => 2000,
		],
		[
			'name'   => 'user3',
			'age'    => 32,
			'salary' => 3000,
		],
	];
    
        echo $arr[2]['salary'] + $arr[0]['salary'];
    
?> -->
<!-- Выведите с помощью этого массива сумму зарплат первого и третьего юзера. -->

<!-- 151 Произвольные массивы в PHP -->

<!-- Многомерные массивы не обязательно должны быть такими, как мы рассмотрели выше.
Посмотрите, например, на следующий массив: -->
<!-- <?php
	$arr = [['a', 'b', [1, 2, 3], [4, 5]], ['d', ['e', 'f']]];
?>
Если переписать его в более понятном виде, то мы увидим, что этот массив "неправильный". 
В нем рядом с обычными элементами располагаются массивы: -->
<!-- <?php
	$arr = [
		[
			'a', 'b', [1, 2, 3], [4, 5],
		],
		[
			'd', ['e', 'f'],
		],
	];
?> -->
<!-- 
Дан следующий массив: -->
<!-- <?php
	$arr = [
        [1, 2, 3,
        [4, 5,
        [6, 7]
        ]
        ],
        [8,
        [9, 10]]
        ];
    
    echo $arr[0][0] + $arr[0][1] +$arr[0][2] + $arr[0][3][0] + $arr[0][3][1] + $arr[0][3][2][0] + $arr[0][3][2][1] + $arr[1][0] + $arr[1][1][0] + $arr[1][1][1];
    
?> -->
<!-- Найдите сумму всех элементов приведенного массива. Обращайтесь к каждому элементу по отдельности, без цикла. -->

<!-- 152 Перебор многомерных массивов в PHP -->

<!-- Давайте теперь научимся делать перебор многомерных массивов с помощью циклов. Пусть у нас дан следующий массив:
<?php
	$arr = [
		['a', 'b', 'c'],
		['d', 'e', 'f'],
		['g', 'h', 'i'],
	];
?>
Как вы видите, этот массив двухмерный, а это значит, что для его перебора нужно два вложенных цикла foreach:
<?php
	foreach ($arr as $sub) {
		foreach ($sub as $elem) {
			echo $elem;
		}
	}
?> -->

<!-- Дан следующий массив: -->
<!-- <?php
	$arr = [[1, 2, 3], [4, 5, 6, 7], [8, 9]];
    foreach($arr as $sub){
        foreach($sub as $elem){
            $sum += $elem;
        }
    }
    echo $sum;
?> -->
<!-- С помощью двух вложенных циклов найдите сумму элементов этого массива. -->

 <!-- 153 Перебор трехмерного массива в PHP -->

<!-- А вот для перебора трехмерного массива уже нужно использовать три вложенных цикла. Пусть для примера у нас дан вот такой массив:
<?php
	$arr = [
		[
			['a', 'b'],
			['c', 'd'],
		],
		[
			['e', 'f'],
			['g', 'h'],
		],
		[
			['i', 'j'],
			['k', 'l'],
		],
	];
?>
Давайте выведем все его элементы на экран:
<?php
	foreach ($arr as $sub) {
		foreach ($sub as $subsub) {
			foreach ($subsub as $elem) {
				echo $elem;
			}
		}
	}
?> -->

<!-- Дан следующий массив: -->
<!-- <?php
	$arr = [
		[
			[1, 2, 3],
			[6, 7, 8],
			[3, 8, 4],
			[6, 7, 9],
		],
		[
			[9, 1, 2],
			[4, 5, 6],
		],
		[
			[9, 1, 2],
			[4, 5, 6],
			[5, 6, 3],
		],
	];
    foreach($arr as $sub){
        foreach($sub as $subsub){
            foreach($subsub as $elem){
                $sum += $elem;
            }
        }
    }
    echo $sum;
?> -->
<!-- С помощью трех вложенных циклов найдите сумму элементов этого массива. -->

<!-- 154 Работа с ключами в многомерных массивах в PHP -->

<!-- Работа с ключами при переборе многомерных массивов осуществляется также, как и при переборе одномерных. 
Пусть для примера дан вот такой массив: -->
<!-- <?php
	$arr = [
		'user1' => [
			'name' => 'name1',
			'age'  => 31,
		],
		'user2' => [
			'name' => 'name2',
			'age'  => 32,
		],
	];
?>
Давайте переберем его вложенными циклами и выведем его элементы с ключами в формате ключ ключ элемент: -->
<!-- <?php
	foreach ($arr as $key1 => $sub) {
		foreach ($sub as $key2 => $elem) {
			// echo $key1 . ' ' . $key2 . ' ' . $elem . '<br>';
		}
	}
?>  -->


<!-- Дан следующий массив: -->
<!-- <?php
	$arr = [
		[
			'name'   => 'user1',
			'age'    => 30,
			'salary' => 1000,
		],
		[
			'name'   => 'user2',
			'age'    => 31,
			'salary' => 2000,
		],
		[
			'name'   => 'user3',
			'age'    => 32,
			'salary' => 3000,
		],
	];
    foreach($arr as $key1 => $sub){
        foreach($sub as $key2 => $elem){
            echo'<pre>';
            print_r($key1 . ''. $key2 . '' . $elem); 
            echo'</pre>';
        }
    }
?> -->
<!-- Выведите элементы этого массива в формате ключ-значение. -->

<!-- <?php
	$arr = [
		'group1'  => ['user11', 'user12', 'user13', 'user43'],
		'group2'  => ['user21', 'user22', 'user23'],
		'group3'  => ['user31', 'user32', 'user33'],
		'group4'  => ['user41', 'user42', 'user43'],
		'group5'  => ['user51', 'user52'],
	];
    foreach($arr as $key1 => $sub){
        foreach($sub as $key2 => $elem){
            echo '<pre>';
print_r($key1 . '-' . $elem);
            echo '</pre>';
        }
    }
?> -->
<!-- С помощью двух вложенных циклов выведите элементы этого массива в формате имя группы - имя юзера. -->

<!-- 
155 Заполнение многомерных массивов PHP -->

<!-- Пусть теперь мы хотим в цикле создать какой-нибудь многомерный массив с числами.
Например, вот такой двухмерный массив: -->

<!-- <?php
	[[1, 2, 3], [1, 2, 3], [1, 2, 3]]
?> -->
<!-- Решим поставленную задачу, применив два вложенных цикла. Внешний цикл будет создавать подмассивы,
 а внутренний - заполнять эти подмассивы числами: -->
<!-- <?php
	$arr = [];
	
	for ($i = 0; $i < 3; $i++) {
		for ($j = 0; $j < 3; $j++) {
			$arr[$i][$j] = $j + 1; // заполняем подмассив числами
		}
	}
    echo '<pre>';
    print_r($arr);
     echo '</pre>';
?> -->

<!-- Сформируйте с помощью двух вложенных циклов следующий массив:
[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]] -->
<!-- <?php
$arr = [];
for($i = 0; $i<3; $i++){
    for($j = 0; $j <5; $j++){
        $arr[$i][$j] = $j + 1;
    }
}
echo '<pre>';
print_r($arr);
 echo '</pre>';
?> -->

<!-- Сформируйте с помощью двух вложенных циклов следующий массив:
[['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x']] -->
<!-- <?php
$arr = [];
for($i = 0; $i<3; $i++){
    for($j = 0; $j <4; $j++){
        $arr[$i][$j] = 'x';
    }
}
echo '<pre>';
print_r($arr);
 echo '</pre>';
?> -->

<!-- Сформируйте с помощью трех вложенных циклов следующий массив:
[
	[
		[1, 2, 3, 4, 5],
		[1, 2, 3, 4, 5],
	],
	[
		[1, 2, 3, 4, 5],
		[1, 2, 3, 4, 5],
	],
	[
		[1, 2, 3, 4, 5],
		[1, 2, 3, 4, 5],
	],
] -->
<!-- <?php
$arr = [];
for($i = 0; $i<3; $i++){
    for($j = 0; $j <2; $j++){
       for($k = 0; $k<5; $k++){
        $arr[$i][$j][$k] = $k + 1;
       }
    }
}
echo '<pre>';
print_r($arr);
 echo '</pre>';
?> -->

<!-- 156 Заполнение многомерных массивов числами по порядку в PHP -->

<!-- В предыдущих примерах все числа в подмассивах были одинаковыми. Давайте теперь сделаем так, чтобы числа возрастали, вот так:
<?php
	[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
?>
Для этого нужно сделать специальную переменную-счетчик, которая будет увеличивать свое значение на 1 при 
каждой итерации внутреннего цикла. Значение этого счетчика мы и будем записывать в массив, вот так: -->
<!-- <?php
	$arr = [];
	$k = 1; // счетчик
	
	for ($i = 0; $i < 3; $i++) {
		for ($j = 0; $j < 3; $j++) {
			$arr[$i][$j] = $k; // записываем счетчик
			$k++; // увеличиваем счетчик
		}
	}
	
	var_dump($arr);
?> -->

<!-- Можно уменьшить код, занеся определение счетчика в первый цикл, а k++ - во второй:
<?php
	$arr = [];
	for ($i = 0, $k = 1; $i < 3; $i++) {
		for ($j = 0; $j < 3; $j++, $k++) {
			$arr[$i][$j] = $k;
		}
	}
	var_dump($arr);
?> -->

<!-- Можно также сделать увеличение счетчика после присваивания:
<?php
	$arr = [];
	for ($i = 0, $k = 1; $i < 3; $i++) {
		for ($j = 0; $j < 3; $j++) {
			$arr[$i][$j] = $k++;
		}
	}
	var_dump($arr);
?>
Обратите внимание на то, что в данном случае должно быть обязательно k++, 
а не ++k, так как второй вариант сначала выполнит увеличение счетчика, 
а уже потом запись в массив (то есть в результате массив начнется с двойки, а не с единицы). -->

<!-- Сформируйте с помощью двух вложенных циклов следующий массив:
<!-- <?php
	[[1, 2], [3, 4], [5, 6], [7, 8]]
?> 
<!-- <?php
$arr = [];
for($i=0, $k = 1; $i < 4; $i++){
    for($j =0; $j<2; $j++){
        $arr[$i][$j] = $k++;
    }
}
echo '<pre>';
print_r($arr);
 echo '</pre>';
 ?> -->

<!-- Сформируйте с помощью двух вложенных циклов следующий массив:
<?php
	[[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24]]
?> -->
<!-- <?php
$arr = [];
for($i=0, $k = 1; $i < 4; $i++){
    for($j =0; $j<3; $j++){
        $arr[$i][$j] = 2*$k++;
    }
}
echo '<pre>';
print_r($arr);
 echo '</pre>';
 ?> -->

<!-- Сформируйте с помощью трех вложенных циклов следующий трехмерный массив:
<?php
	[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
?> -->
<!-- <?php
$arr = [];
for($i=0, $k = 1; $i < 2; $i++){
    for($j =0; $j<2; $j++){
        for($n = 0; $n<2; $n++){
            $arr[$i][$j][$n] = $k++;
        }
        
    }
}
echo '<pre>';
print_r($arr);
 echo '</pre>';
 ?> -->

<!-- 157 Массив ассоциативных массивов в PHP -->

<!-- Очень часто в PHP появляются массивы, содержащие набор неких сущностей, например, список пользователей или список продуктов.
Вот пример такого массива: -->
<!-- <?php
	$users = [
		[
			'name'   => 'user1',
			'age'    => 31,
			'salary' => 1000,
		],
		[
			'name'   => 'user2',
			'age'    => 32,
			'salary' => 2000,
		],
		[
			'name'   => 'user3',
			'age'    => 33,
			'salary' => 3000,
		],
	];
?> -->
<!-- Как вы видите, здесь мы имеем дело с массивом ассоциативных массивов. 
Не смотря на то, что этот массив двухмерный, как правило для его перебора используется один foreach, перебирающий подмассивы. 
А части самих подмассивов просто получают по ключу и записывают в нужном порядке и формате.
Давайте для примера выведем столбец наших работников в некотором формате: -->
<!-- <?php
	foreach ($users as $user) {
		echo $user['name'] . ': ' . $user['salary'] . '$, ' . $user['age'] . '<br>';
	}
?> -->
<!-- 
<?php
	$products = [
		[
			'name'   => 'мясо',
			'price'  => 100,
			'amount' => 5,
		],
		[
			'name'   => 'овощи',
			'price'  => 200,
			'amount' => 6,
		],
		[
			'name'   => 'фрукты',
			'price'  => 300,
			'amount' => 7,
		],
	];
    foreach($products as $product){
        echo'<pre>';
        print_r( $product['name'] . ': ' . $product['amount'] . ' по цене: ' . $product['price']); 
        echo'</pre>';
    }
?> -->
<!-- Выведите с помощью этого массива столбец продуктов в каком-нибудь придуманном вами формате. -->

<!-- 158 Конвертация многомерных массивов в PHP -->

<!-- Пусть у нас есть список юзеров, хранящийся в следующей структуре:

<?php
	$users = [
		[
			'id' => 11,
			'name' => 'name11',
			'surname' => 'surname11',
		],
		[
			'id' => 14,
			'name' => 'name14',
			'surname' => 'surname14',
		],
		[
			'id' => 17,
			'name' => 'name17',
			'surname' => 'surname17',
		],
	];
?> -->
<!-- Давайте напишем код, который переформатирует наш массив вот в такой:
[
	11 => [
		'id' => 11,
		'name' => 'name11',
		'surname' => 'surname11',
	],
	14 => [
		'id' => 14,
		'name' => 'name14',
		'surname' => 'surname14',
	],
	17 => [
		'id' => 17,
		'name' => 'name17',
		'surname' => 'surname17',
	],
]
Решим поставленную задачу с помощью цикла: -->
<!-- <?php
	$res = [];
	foreach ($users as $user) {
		$res[$user['id']] = $user;
	}
	
    echo'<pre>';
    print_r( $res); 
    echo'</pre>';
?> -->

<!-- Дан список городов и их стран, хранящийся в следующей структуре: -->
<!-- <?php
$arr = [
	[
		'country' => 'Россия',
		'city' =>    'Москва',
	],
	[
		'country' => 'Беларусь',
		'city' =>    'Минск',
	],
	[
		'country' => 'Россия',
		'city' =>    'Питер',
	],
	[
		'country' => 'Россия',
		'city' =>    'Владивосток',
	],
	[
		'country' => 'Украина',
		'city' =>    'Львов',
	],
	[
		'country' => 'Беларусь',
		'city' =>    'Могилев',
	],
	[
		'country' => 'Украина',
		'city' =>    'Киев',
	],
];
$res = [];
foreach ($arr as $elem){
    $res[$elem['country']][] = $elem['city'];
}
echo'<pre>';
print_r($res); 
echo'</pre>';
?> -->
<!-- Напишите код, которой переделает структуру данных вот в такую:
[
	'Россия'=> [
		'Москва', 'Питер', 'Владивосток',
	],
	'Беларусь'=> [
		'Минск', 'Могилев'
	],
	'Украина'=> [
		'Киев', 'Львов'
	],
] -->

<!-- Дан список событий за определенные даты, хранящийся в следующей структуре: -->
<!-- <?php
$arr = [
	[
		'date'  => '2019-12-29',
		'event' => 'name1'
	],
	[
		'date'  => '2019-12-31',
		'event' => 'name2'
	],
	[
		'date'  => '2019-12-29',
		'event' => 'name3'
	],
	[
		'date'  => '2019-12-30',
		'event' => 'name4'
	],
	[
		'date'  => '2019-12-29',
		'event' => 'name5'
	],
	[
		'date'  => '2019-12-31',
		'event' => 'name6'
	],
	[
		'date'  => '2019-12-29',
		'event' => 'name7'
	],
	[
		'date'  => '2019-12-30',
		'event' => 'name8'
	],
	[
		'date'  => '2019-12-30',
		'event' => 'name9'
	],
];
$res = [];
foreach($arr as $elem){
    $res[$elem['date']][]=$elem['event'];
}
echo'<pre>';
print_r($res); 
echo'</pre>';
?> -->
<!-- Напишите код, которой переделает структуру данных вот в такую:
[
	'2019-12-29'=> ['name1', 'name3', 'name5', 'name7'],
	'2019-12-30'=> ['name4', 'name8', 'name9'],
	'2019-12-31'=> ['name2', 'name6'],
] -->

<!-- Дан список событий за определенные даты, хранящийся в следующей структуре: -->
<!-- <?php
$arr = [
	'2019-12-29'=> ['name1', 'name2', 'name3', 'name4'],
	'2019-12-30'=> ['name5', 'name6', 'name7'],
	'2019-12-31'=> ['name8', 'name9'],
];
$res = [];
foreach($arr as $date => $events){
foreach($events as $event){
    $res[] = [
        'date' => $date,
        'event' => $event
    ];
}
}
echo'<pre>';
print_r($res); 
echo'</pre>';
?> -->
<!-- Напишите код, которой переделает структуру данных вот в такую: -->

<!-- 159 Математические функции в PHP

Работа со степенью и корнем  sqrt pow-->

<!-- Возведите 2 в 10 степень.
Найдите квадратный корень из 245. -->
<!-- <?php
echo pow(2, 10). '<br>';
echo sqrt(245);
?> -->

<!-- Дан массив:
Найдите корень из суммы квадратов его элементов. Для решения воспользуйтесь циклом foreach. -->
<!-- <?php
	$arr = [4, 2, 5, 19, 13, 0, 10];
	foreach($arr as $elem){
		$sum += pow($elem, 2);
	}
	//echo sqrt($sum);
?> -->

<!-- Работа с функциями округления: round ceil floor -->

<!-- Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых. -->
<!-- <?php
echo round(sqrt(379),1). '<br>';
echo round(sqrt(379),2). '<br>';
echo round(sqrt(379),3). '<br>';
?> -->

<!-- Найдите квадратный корень из 587. 
Округлите результат в большую и меньшую сторону, запишите результаты округления в ассоциативный массив с ключами 'floor' и 'ceil' -->
<!-- <?php
echo floor(sqrt(587)). '<br>';
echo ceil(sqrt(587)). '<br>';
echo round(sqrt(587),3). '<br>'
?> -->

<!-- Работа с min и max -->

<!-- Дан массив:
Найдите минимальное и максимальное число. -->
<!-- <?php
	//$arr = [4, -2, 5, 19, -130, 0, 10];
	//echo min($arr). '<br>';
	//echo max($arr). '<br>';
?> -->

<!-- Работа с рандомом mt_rand