;  103 Цепочки операторов объединения с null в PHP
; Операторы объединения можно вызывать друг за другом цепочкой.
;  В следующем примере в переменную запишется либо первый элемент массива, либо второй элемент массива, 
;  либо заданная строка, если этих элементов нет:

; <?php
; 	$elem = $arr['test1'] ?? $arr['test2'] ?? 'empty';
; ?>

; Перепишите следующий код через изученный оператор:
; <?php
; 	if (isset($user['name'])) {
; 		$res = $user['name'];
; 	} elseif (isset($user['surname'])) {
; 		$res = $user['surname'];
; 	} else {
; 		$res = '';
; 	}
; ?>
; $res = $user['name']?? $user['surname']?? ''

; // 104 Логические операции в PHP
; Давайте посмотрим на следующий код:
; <?php
; 	$a = 1;
; 	$b = 2;
; 	if ($a == $b) {
; 		var_dump(true);
; 	} else {
; 		var_dump(false);
; 	}
; ?>
; Как вы видите, в данном коде выполняется сравнение переменных a и b и, если они равны, то в консоль выводится true, а если не равны - то false.
; Здесь пришло время открыть вам некоторую неочевидную вещь: 
; на самом деле конструкция if не является обязательной для сравнения - сами операторы вида ==, ===, !=, <, > и т.д. 
; возвращают своим результатом либо true, либо false.
; Смотрите пример:
; <?php
; 	var_dump(1 == 1); // выведет true
; 	var_dump(1 == 2); // выведет false
; ?>
; Исходя из написанного, код из начала урока можно переписать более простым образом:
; <?php
; 	$a = 1;
; 	$b = 2;
; 	var_dump($a == $b);
; ?>
; Можно не выводить результат сразу, а присвоить его какой-нибудь переменной:
; <?php
; 	$a = 1;
; 	$b = 2;
	
; 	$res = $a == $b;
; 	var_dump($res);
; ?>

; Пусть даны следующие переменные:
; Используя оператор ==, узнайте, равны ли значения этих переменных или нет.
; <?php
; 	$a = 2 * (3 - 1);
; 	$b = 6 - 2;
; $res = $a == $b;
; var_dump($res);
; ?>
; Пусть даны следующие переменные:
; Используя оператор >, узнайте, больше ли переменная $a, чем $b.
; <?php
; 	$a = 5 * (7 - 4);
; 	$b = 1 + 2 + 7;

; 	$res = $a > $b;
; 	var_dump($res);
; ?>

; // 105 Определение четверти часа в PHP
; Пусть у нас есть переменная $min, в которой хранится количество минут от 0 до 59:
; <?php
; 	$min = 10;
; ?>
; Давайте определим, в какую четверть часа попадает указанное количество минут:
; <?php
; 	$min = 10;
; 	if ($min >= 0 and $min <= 14) {
; 		echo '1 четверть';
; 	}
; 	if ($min >= 15 and $min <= 29) {
; 		echo '2 четверть';
; 	}
; 	if ($min >= 30 and $min <= 44) {
; 		echo '3 четверть';
; 	}
; 	if ($min >= 45 and $min <= 59) {
; 		echo '4 четверть';
; 	}
; ?>

; Решите аналогичную задачу, только определите в какую треть часа попадает указанное количество минут.
; <?php
; 	$min = 25;
; 	if ($min >= 0 and $min <= 19) {
; 		echo '1 -я';
; 	}
; 	if ($min >= 20 and $min <= 39) {
; 		echo '2 -я';
; 	}
; 	if ($min >= 40 and $min <= 59) {
; 		echo '3 -я';
; 	}
; ?>

; // 106 Проверка длины строк и массивов в PHP
; Пусть у нас есть переменная $str, в которой хранится некоторая произвольная строка:
; <?php
; 	$str = '12345';
; ?>
; Давайте напишем условие, которое выведет сообщение на экран, если длина строки равна или больше трех символов:
; <?php
; 	$str = '12345';
; 	if (strlen($str) >= 3) {
; 		echo '!';
; 	}
; ?>

; В переменной $arr содержится некоторый массив с числами. 
; Напишите условие, которое проверит, что в массиве 3 элемента. 
; Если это так, выведите на экран сумму элементов массива.
; <?php
; $str = '12345';
; if(strlen($str) >= 3){
; 	echo $str[0] + $str[1] + $str[2] + $str[3] + $str[4];
; }

; ?>

; // 107 Проверка символа строки в PHP
; Пусть дана некоторая строка, состоящая из цифр:
; <?php
; 	$str = '12345';
; ?>
; Давайте проверим, равен ли первый символ этой строки числу 1:
; <?php
; 	$str = '12345';
	
; 	if ($str[0] == 1) {
; 		echo '!';
; 	}
; ?>
; Проверим теперь последний символ на равенство числу 5:
; <?php
; 	$str = '12345';
; 	$last = $str[strlen($str) - 1];
; 	if ($last == 5) {
; 		echo '!';
; 	}
; ?>

; Дана некоторая строка. Проверьте, заканчивается ли она на '0'
; <?php
; $str = '12340';
; $last = $str[strlen($str) - 1];
; if($last == 0) {
; 	echo '0';
; }
; ?>

; // 108 Остаток от деления в PHP
; Пусть у нас есть две переменные с числами:
; <?php
; 	$a = 10;
; 	$b = 3;
; ?>
; Давайте найдем остаток от деления одной переменной на другую:
; <?php
; 	$a = 10;
; 	$b = 3;
; 	echo $a % $b; // выведет 1
; ?>
; Пусть теперь в переменных хранятся такие значения, что одна переменная делится на вторую нацело:
; <?php
; 	$a = 10;
; 	$b = 5;
; 	echo $a % $b; // выведет 0
; ?>
; Давайте напишем скрипт, который будет проверять, делится ли нацело одно число на второе:
; <?php
; 	$a = 10;
; 	$b = 3;
; 	if ($a % $b === 0) {
; 		echo 'делится нацело';
; 	} else {
; 		echo 'делится с остатком';
; 	}
; ?>
; Пусть теперь требуется, если число делится с остатком, вывести этот остаток на экран:
; <?php
; 	$a = 10;
; 	$b = 3;
; 	if ($a % $b === 0) {
; 		echo 'делится нацело';
; 	} else {
; 		echo 'делится с остатком ' . $a % $b;
; 	}
; ?>
; В приведенном выше коде получается, что остаток вычисляется в двух местах, а это не оптимально.
; Поправим проблему:
; <?php
; 	$a = 10;
; 	$b = 3;
; 	$rest = $a % $b;
; 	if ($rest === 0) {
; 		echo 'делится нацело';
; 	} else {
; 		echo 'делится с остатком ' . $rest;
; 	}
; ?>

; Как известно, четные числа делятся на 2 без остатка, а нечетные - с остатком. Пусть у вас дано число. 
; С помощью оператора % и конструкции if проверьте четное это число или нет.
; <?php
; $num = 10;
; $res = $num % 2;
; if ($res === 0) {
; 	echo 'четное число';
; } else {
; 	echo 'не четное число' . $res;
; }
; ?>

; // 110 Цикл foreach в PHP

; Цикл foreach используется для прохождения по всем элементам массива.
; Синтаксис такой: пишется ключевое слово foreach, а после него круглые скобки (). 
; В этих скобках указывается переменная, в которой лежит перебираемый массив, потом слово as, 
; а после него - переменная, в которую при каждом проходе цикла будет попадать элемент массива. 
; Затем должны идти фигурные скобки {}, в которых будет расположено тело цикла.
; Итак, синтаксис нашего цикла выглядит так:
; <?php
; 	foreach (имяМассива as переменнаяДляЭлемента) {
; 		/*
; 			Код, который находится между фигурными
; 			скобками будет повторяться столько раз,
; 			сколько элементов у массива.
; 		*/
; 	}
; ?>

; // 111 Элементы массива через foreach в PHP

; Давайте с помощью цикла foreach выведем на экран все элементы массива:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
	
; 	foreach ($arr as $elem) {
; 		echo $elem;
; 	}
; ?>

; // 112 Столбец элементов массива в PHP

; А теперь сделаем так, чтобы элементы массива выводились не в строчку, а получился столбец. 
; Для этого при выводе элемента массива будем ставить после него тег br:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
	
; 	foreach ($arr as $elem) {
; 		echo $elem . '<br>';
; 	}
; ?>

; Дан массив:
; Выведите столбец элементов этого массива на экран.
; <?php
; 	$arr = ['a', 'b', 'c', 'd', 'e'];
; 	foreach ($arr as $elem) {
; 		echo $elem . '<br>';
; 	}
; ?>

; // 113 Квадраты чисел в PHP

; Переберем массив с числами циклом и выведем на экран квадраты этих чисел:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
	
; 	foreach ($arr as $elem) {
; 		echo $elem * $elem . '<br>';
; 	}
; ?>

; // 114 Накопление суммы в PHP

; Давайте с помощью цикла найдем сумму элементов массива. Для этого используем уже изученный нами прием для накопления результата в цикле:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
; 	$res = 0;
	
; 	foreach ($arr as $elem) {
; 		$res += $elem;
; 	}
	
; 	echo $res;
; ?>

; Найдите среднее арифметическое его элементов.
; <?php
; 	$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
; 	$res = 0;
; 	foreach($arr as $elem) {
; 		$res += $elem;
; 	}
; 	echo $res / count($arr);
; ?>

; // 115 Получение ключей в цикле foreach в PHP

; В цикле foreach можно получать не только элементы перебираемого массива, но и ключи. 
; В таком случае после as следует указать такую конструкцию: $ключ => $элемент. 
; В переменной $ключ будут хранится ключи, а в переменной $элемент - соответствующие этим ключам элементы.
; Чтобы посмотреть на практике, как работать с ключами, давайте сделаем следующее - при каждом проходе цикла 
; будем выводить на экран ключ массива и соответствующий ему элемент через дефис:
; <?php
; 	$arr = ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5];
	
; 	foreach ($arr as $key => $elem) {
; 		echo $key.'-'.$elem; // выведет: 'a-1', 'b-2', 'c-3' и так далее...
; 	}
; ?>

; <?php
; 	$arr = ['green' => 'зеленый', 'red' => 'красный','blue' => 'голубой'];
; 	foreach ($arr as $key => $elem) {
; 		echo $key.'-'.$elem . '<br>';
; 	}
; ?>
; С помощью цикла foreach выведите на экран столбец ключей и элементов в формате green - зеленый.

; Дан массив:

; <?php
; 	$arr = ['user1' => 30, 'user2' => 32, 'user3' => 33];
; 	foreach($arr as $key => $elem){
; 		echo $key.'-'.'возраст'.$elem.'лет' . '<br>';
; 	}
; ?>
; С помощью цикла foreach выведите на экран столбец строк такого формата: user1 - возраст 30 лет.

;// 116 Перебор массива и if в PHP

; Внутри цикла foreach можно использовать условие if. Давайте, например, при переборе массива, будем выводить на экран только элементы с четными числами:
; <?php
; 	$arr = [1, 2, 3, 4, 5];
	
; 	foreach ($arr as $elem) {
; 		if ($elem % 2 == 0) {
; 			echo $elem.'-';
; 		}
; 	}
; ?>

; <?php
; 	$arr = [1, 2, 3, 4, 5];
;     foreach ($arr as $elem) {
;         if($elem % 2 != 0) {
;             echo $elem.'';
;         }
;     }
; ?>
; С помощью цикла foreach и оператора if выведите в консоль нечетные элементы массива.

; Дан массив:
; <?php
; 	$arr = [2, 5, 9, 15, 1, 4];
;     foreach($arr as $elem){
;         if(3 < $elem && $elem < 10) {
;             echo $elem;
;         }
;     }
; ?>
; С помощью цикла foreach и оператора if выведите в консоль те элементы массива, которые больше 3-х, но меньше 10.

; Дан массив с числами. Числа могут быть положительными и отрицательными. Найдите сумму положительных элементов массива.
;  <?php
; $arr = [2, 5, -9, 15, -1, 4];
; $res = 0 ;
; foreach($arr as $elem){
;     if($elem > 0){
;     $res += +$elem;
;     }  
; }
; echo $res.'<br>';
; ?>

; <?php
; 	$arr = [10, 20, 30, 50, 235, 3000];
;     foreach($arr as $elem){
;     $elem=(string) $elem;
;     if($elem[0]==1 or $elem[0]==2 or $elem[0]==5){
;         echo $elem.' ';
;     }
; }
; ?>
; Выведите на экран только те числа из массива, которые начинаются на цифру 1, 2 или 5.

; Составьте массив дней недели. С помощью цикла foreach выведите все дни недели, а выходные дни выведите жирным.
; <php?
; $arr = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
; foreach ($arr as $elem){
;     if($elem == 'вс'or $elem =='сб'){
;         echo '<b>'.$elem.'</b>';
; }
; else{
;  echo $elem;
;     }
; }
; ?>

; Задание:Составьте массив дней недели. С помощью цикла foreach выведите все дни недели, субботу и воскресенье жирным, 
; а текущий день выведите курсивом (если это суббота или воскресенье то отобразить и жирным и курсивом). 
; Текущий день должен храниться в переменной $day.
; <?php 
; $day='вс';
; $arr=['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
; foreach ($arr as $value) {
;     if ($value=='сб' or $value=='вс' and $value==$day) {
;             echo '<i><b> '.$value.'</b></i>'.' ';
;     } 
;     else {
;         if ($value=='сб' or $value=='вс') {
;             echo '<b>'.$value.'</b>'.' ';
;         }
;         else {
;         if ($value==$day) {
;         echo '<i>'.$value.'</i>';
;         } 
;             else {
;             echo ' '.$value.' ';
;             }
;         }
;     }
; }
; ?>

; // 117 Цикл while в PHP

; ?php
; 	while ( пока выражение истинно ) {
; 		выполняем этот код циклически
; 		в начале каждого цикла проверяем выражение в круглых скобках
; 	}
; ?>
; Цикл закончится, когда выражение перестанет быть истинным. Если оно было ложным изначально - то он не выполнится ни разу.

; Давайте для примера последовательно выведем с помощью цикла while числа от одного до пяти:
; <?php
; 	$i = 1; // задаем какую-нибудь переменную
	
; 	while ($i <= 5) {
; 		echo $i; // выводим содержимое $i в консоль
; 		$i++;    // увеличиваем $i на единицу при каждом проходе цикла
; 	}
; ?>

; Выведите на экран числа от 11 до 33.
; <php?
; $i = 11;
; while($i <= 33){
;     echo $i;
;     $i++;
; }
; ?>

; 118 Более сложный цикл while в PHP

; К счетчику не обязательно прибавлять единицу. Давайте для примера выведем столбец четных чисел от 2 до 10. 
; Для этого начальное значение переменной $i зададим как 2 и будем прибавлять двойку:
; <?php
; 	$i = 2;
; 		while ($i <= 10) {
; 		echo $i;
; 		$i += 2; // увеличиваем $i на 2 при каждом проходе цикла
; 	}
; ?>

; Выведите на экран четные числа в промежутке от 0 до 100.
; <php?
; $i = 0;
; while($i <= 100){
;     echo $i;
;     $i +=2;
; }
; ?>

; 119 Обратный отсчет в цикле while в PHP

; Счетчик не обязательно должен увеличиваться в цикле. Бывают и обратные ситуации, когда счетчик, наоборот, уменьшается. 
; Давайте для примера выведем столбец чисел от 10 до 1:
; <?php
; 	$i = 10; // начальное значение 10
; 		while ($i >= 1) { // пока $i больше 1
; 		echo $i;
; 		$i--; // уменьшаем $i на единицу
; 	}
; ?>

; Выведите на экран числа от 30 до 0.
; <php?
; $i = 30;
; while($i >=0){
;     echo $i;
;     $i--;
; }
; ?>

; 120 Ошибки начинающих при работе с циклом while в PHP

; <?php
; 	$test = true;
	
; 	while ($test === true) {
; 		/*
; 			Написанный здесь код будет выполняться "вечно"
; 			(пока скрипт не будет остановлен принудительно).
; 		*/
; 	}
; ?>

; 123 Изначально неверное условие в цикле while в PHP

; 125 Цикл for в PHP

; Цикл for является альтернативой while. Он более сложен для понимания, но чаще всего его любят больше за то, что он занимает меньше строчек.
; Вот его синтаксис:
; <?php
; 	for ( начальные команды; условие окончания; команды после прохода ) {
; 		тело цикла
; 	}
; ?>
; Начальные команды - это то, что выполнится перед стартом цикла. Они выполнятся только один раз. Обычно там размещают начальные значения счетчиков. 
; Условие окончания - это условие, при котором цикл будет крутится, пока оно истинное. Команды после прохода - это команды, которые будут выполнятся каждый раз 
; при окончании прохода цикла. Обычно там увеличивают счетчики.
; Давайте с помощью цикла for выведем последовательно числа от 1 до 9:
; <?php
; 	/*
; 		В начале цикла $i будет равно нулю,
; 		цикл будет выполнятся пока $i <= 9,
; 		после каждого прохода к $i прибавляется единица:
; 	*/
; 	for ($i = 0; $i <= 9; $i++) {
; 		echo $i; // выведет 1, 2... 9
; 	}
; ?>

; С помощью цикла for выведите на экран числа от 1 до 100.
; <php?
; for ($i = 1; $i <=100; $i++){
;     echo $i;
; }
; ?>

; С помощью цикла for выведите на экран четные числа в промежутке от 0 до 100.
; <php?
; for ($i = 2; $i <=100; $i+=2){
;     echo $i;
; }
; ?>

; С помощью цикла for выведите на экран нечетные числа в промежутке от 1 до 99.
; <php?
; for ($i = 1; $i <=99; $i+=2){
;     echo $i;
; }
; ?>

; 126 Накопление результата в цикле PHP

; Давайте с помощью цикла найдем сумму целых чисел от 1 до 100. Для таких задач существует стандартное решение, которое мы сейчас разберем. 
; Это решение заключается в том, что циклом перебираются числа и их сумма последовательно записывается в какую-то переменную переменную:
; <?php
; 	$result = 0;
; 		for ($i = 1; $i <= 100; $i++) {
; 		$result = $result + $i;
; 	}
; 		echo $result; // искомая сумма
; ?>
; Как это работает: изначально переменная $result имеет значение 0, затем при первом проходе цикла в нее записывается ее текущее 
; содержимое плюс значение счетчика. Получится, что каждую итерацию наша переменная будет расти, постепенно накапливая в себе результат.

; Найдите произведение целых чисел от 1 до 20.
; <php?
; $res = 1;
; for($i = 1; $i <= 20; $i++){
;     $res = $res * $i;
;    }
; echo $res;
; ?>

; Найдите сумму четных чисел от 2 до 100.
; <php?
; $res = 0;
; for($i = 2; $i <= 100; $i+=2){
;     $res = $res + $i;
;    }
; echo $res;
; ?>

; Найдите сумму нечетных чисел от 1 до 99.
; <php?
; $res = 0;
; for($i = 1; $i <= 100; $i+=2){
;     $res = $res + $i;
;    }
; echo $res;
; ?>

; 128 Общий синтаксис цикла for в PHP

; сделаем два счетчика: первый пусть каждую итерацию цикла увеличивается на единицу, а второй - на двойку:

; <?php
; 	for ($i = 0, $j = 0; $i <= 9; $i++, $j += 2) {
; 		echo $i . ' ' . $j . '<br>';
; 	}
; ?>